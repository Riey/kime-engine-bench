/* automatically generated by rust-bindgen 0.57.0 */

pub type __uint32_t = ::std::os::raw::c_uint;
pub type ucschar = u32;
extern "C" {
    pub fn hangul_is_choseong(c: ucschar) -> bool;
}
extern "C" {
    pub fn hangul_is_jungseong(c: ucschar) -> bool;
}
extern "C" {
    pub fn hangul_is_jongseong(c: ucschar) -> bool;
}
extern "C" {
    pub fn hangul_is_choseong_conjoinable(c: ucschar) -> bool;
}
extern "C" {
    pub fn hangul_is_jungseong_conjoinable(c: ucschar) -> bool;
}
extern "C" {
    pub fn hangul_is_jongseong_conjoinable(c: ucschar) -> bool;
}
extern "C" {
    pub fn hangul_is_syllable(c: ucschar) -> bool;
}
extern "C" {
    pub fn hangul_is_jamo(c: ucschar) -> bool;
}
extern "C" {
    pub fn hangul_is_cjamo(c: ucschar) -> bool;
}
extern "C" {
    pub fn hangul_jamo_to_cjamo(ch: ucschar) -> ucschar;
}
extern "C" {
    pub fn hangul_choseong_to_jongseong(ch: ucschar) -> ucschar;
}
extern "C" {
    pub fn hangul_jongseong_to_choseong(ch: ucschar) -> ucschar;
}
extern "C" {
    pub fn hangul_jongseong_dicompose(ch: ucschar, jong: *mut ucschar, cho: *mut ucschar);
}
extern "C" {
    pub fn hangul_syllable_iterator_prev(
        str_: *const ucschar,
        begin: *const ucschar,
    ) -> *const ucschar;
}
extern "C" {
    pub fn hangul_syllable_iterator_next(
        str_: *const ucschar,
        end: *const ucschar,
    ) -> *const ucschar;
}
extern "C" {
    pub fn hangul_syllable_len(
        str_: *const ucschar,
        max_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hangul_jamo_to_syllable(
        choseong: ucschar,
        jungseong: ucschar,
        jongseong: ucschar,
    ) -> ucschar;
}
extern "C" {
    pub fn hangul_syllable_to_jamo(
        syllable: ucschar,
        choseong: *mut ucschar,
        jungseong: *mut ucschar,
        jongseong: *mut ucschar,
    );
}
extern "C" {
    pub fn hangul_jamos_to_syllables(
        dest: *mut ucschar,
        destlen: ::std::os::raw::c_int,
        src: *const ucschar,
        srclen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HangulKeyboard {
    _unused: [u8; 0],
}
pub type HangulKeyboard = _HangulKeyboard;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HangulCombination {
    _unused: [u8; 0],
}
pub type HangulCombination = _HangulCombination;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HangulInputContext {
    _unused: [u8; 0],
}
pub type HangulInputContext = _HangulInputContext;
extern "C" {
    pub fn hangul_keyboard_new() -> *mut HangulKeyboard;
}
extern "C" {
    pub fn hangul_keyboard_delete(keyboard: *mut HangulKeyboard);
}
extern "C" {
    pub fn hangul_keyboard_set_value(
        keyboard: *mut HangulKeyboard,
        key: ::std::os::raw::c_int,
        value: ucschar,
    );
}
extern "C" {
    pub fn hangul_keyboard_set_type(keyboard: *mut HangulKeyboard, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hangul_combination_new() -> *mut HangulCombination;
}
extern "C" {
    pub fn hangul_combination_delete(combination: *mut HangulCombination);
}
extern "C" {
    pub fn hangul_combination_set_data(
        combination: *mut HangulCombination,
        first: *mut ucschar,
        second: *mut ucschar,
        result: *mut ucschar,
        n: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn hangul_ic_new(keyboard: *const ::std::os::raw::c_char) -> *mut HangulInputContext;
}
extern "C" {
    pub fn hangul_ic_delete(hic: *mut HangulInputContext);
}
extern "C" {
    pub fn hangul_ic_process(hic: *mut HangulInputContext, ascii: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn hangul_ic_reset(hic: *mut HangulInputContext);
}
extern "C" {
    pub fn hangul_ic_backspace(hic: *mut HangulInputContext) -> bool;
}
extern "C" {
    pub fn hangul_ic_is_empty(hic: *mut HangulInputContext) -> bool;
}
extern "C" {
    pub fn hangul_ic_has_choseong(hic: *mut HangulInputContext) -> bool;
}
extern "C" {
    pub fn hangul_ic_has_jungseong(hic: *mut HangulInputContext) -> bool;
}
extern "C" {
    pub fn hangul_ic_has_jongseong(hic: *mut HangulInputContext) -> bool;
}
extern "C" {
    pub fn hangul_ic_is_transliteration(hic: *mut HangulInputContext) -> bool;
}
extern "C" {
    pub fn hangul_ic_set_output_mode(hic: *mut HangulInputContext, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hangul_ic_set_keyboard(hic: *mut HangulInputContext, keyboard: *const HangulKeyboard);
}
extern "C" {
    pub fn hangul_ic_select_keyboard(
        hic: *mut HangulInputContext,
        id: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn hangul_ic_set_combination(
        hic: *mut HangulInputContext,
        combination: *const HangulCombination,
    );
}
extern "C" {
    pub fn hangul_ic_connect_callback(
        hic: *mut HangulInputContext,
        event: *const ::std::os::raw::c_char,
        callback: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn hangul_ic_get_n_keyboards() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hangul_ic_get_keyboard_id(
        index_: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hangul_ic_get_keyboard_name(
        index_: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hangul_ic_get_preedit_string(hic: *mut HangulInputContext) -> *const ucschar;
}
extern "C" {
    pub fn hangul_ic_get_commit_string(hic: *mut HangulInputContext) -> *const ucschar;
}
extern "C" {
    pub fn hangul_ic_flush(hic: *mut HangulInputContext) -> *const ucschar;
}
